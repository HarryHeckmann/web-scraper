

service: web-scraper-lambda

plugins:
  - serverless-bundle
  - serverless-offline

custom:
  myStage: ${opt:stage, self:provider.stage}
  serverless-offline:
    httpPort: 3000
  resourceStages:
    prod: prod
    dev: dev

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 5
  memorySize: 128
  stage: dev
  environment:
    searchRequestTable: ${opt:stage}-search_request
    userInfoTable: ${opt:stage}-user_info
  iamRoleStatements:
    # Allow read/write access to the DynamoDB Table we're creating below
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - "Fn::GetAtt": [ searchRequestTable, Arn ]
        - "Fn::GetAtt": [ userInfoTable, Arn ]


functions:
  getSearches:
    handler: src/handler.getSearches
    events:
      - http:
          path: searches
          method: get
          cors: true
  addSearch:
    handler: src/handler.addSearch
    events:
      - http:
          path: searches
          method: post
          cors: true
  addUser:
    handler: src/handler.addUser
    events:
      - http:
          path: users
          method: post
          cors: true


resources:
  Resources:

    ###
    # DynamoB table for storing all URLs and search terms we need to crawl the web for
    searchRequestTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.searchRequestTable}
        AttributeDefinitions:
          - AttributeName: url
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: url
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 5

    ###
    # DynamoDB Table for storing a user's information (phone number, e-mail, etc)
    userInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.userInfoTable}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 5

